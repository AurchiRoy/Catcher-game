# -*- coding: utf-8 -*-
"""Catcher Game version01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q5BsWmfH2Nin4boQvUeeL2eaEndb5Vhc
"""

from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import random
import sys


# Global variables
catcher_x = 100.0
diamond_x = 0.0
diamond_y = 200.0
score = 0
game_over = False
paused = False
diamond_speed = 1.0
point_size = 5.0


def WritePixel(x, y):
    glPointSize(point_size)
    glBegin(GL_POINTS)
    glVertex2f(x, y)
    glEnd()




def MidpointLine(x0, y0, x1, y1, color):
    def WritePixel(x, y, color):
        glPointSize(point_size)
        glColor3fv(color)
        glBegin(GL_POINTS)
        glVertex2f(x, y)
        glEnd()




    def convert_coordinates(x, y, zone):
        if zone == 0:
            return x, y
        elif zone == 1:
            return y, x
        elif zone == 2:
            return -y, x
        elif zone == 3:
            return -x, y
        elif zone == 4:
            return -x, -y
        elif zone == 5:
            return -y, -x
        elif zone == 6:
            return y, -x
        elif zone == 7:
            return x, -y




    dx, dy = x1 - x0, y1 - y0
    zone = convert_coordinates(x0, y0, x1, y1)
    d = 2 * dy - dx
    incrE = 2 * dy
    incrNE = 2 * (dy - dx)
    x, y = x0, y0




    x, y = convert_coordinates(x, y, zone)
    WritePixel(x, y, color)




    while x < x1:
        if d <= 0:
            d += incrE
            x += 1
        else:
            d += incrNE
            x += 1
            y += 1




        x, y = convert_coordinates(x, y, zone)
        WritePixel(x, y, color)




def draw_catcher():
    glColor3f(1.0, 1.0, 1.0)  # White color for catcher
    glPointSize(point_size)


    x = int(catcher_x)
    y_top = 20
    y_bottom = 10




    MidpointLine(x - 10, 15, x + 10, 15)          # Top
    MidpointLine(x - 15, 10, x - 10, 15)         # Left
    MidpointLine(x - 15, 10, x + 15, 10)        # bottom
    MidpointLine(x + 10, 15, x + 15, 10)   # Right not working


def WritePixel(x, y):
    glPointSize(point_size)
    glBegin(GL_POINTS)
    glVertex2f(x, y)
    glEnd()




def MidpointLine(x0, y0, x1, y1):
    dx = x1 - x0
    dy = y1 - y0
    incrE = 2 * dy
    incrNE = 2 * (dy - dx)
    d = 2 * dy - dx
    x = x0
    y = y0
    WritePixel(x, y)




    while x < x1:
        if d <= 0:
            # choose E
            d = d + incrE
            x = x + 1
        else:
            # choose NE
            d = d + incrNE
            x = x + 1
            y = y + 1


        WritePixel(x, y)


def draw_diamond():
    glColor3f(random.random(), random.random(), random.random())  # Random color for diamond
    glPointSize(point_size)


    x = int(diamond_x)
    y = int(diamond_y)


    MidpointLine(x, y, x + 5, y + 10)  # Top-Left
    MidpointLine(x + 5, y + 10, x + 10, y)  # Top-Right
    MidpointLine(x + 10, y, x + 5, y - 10)  # Bottom-Right
    MidpointLine(x + 5, y - 10, x, y)  # Bottom-Left








def draw_buttons():
    # Draw left arrow button
    glColor3f(0.0, 1.0, 1.0)  # Bright teal color
    draw_left_arrow_button()




    # Draw play/pause button
    glColor3f(1.0, 0.75, 0.0)  # Amber color
    draw_play_pause_button()


    # Draw cross button
    glColor3f(1.0, 0.0, 0.0)  # Red color
    draw_cross_button()




def draw_left_arrow_button():
    x = 30
    y = 180
    size = 10




    MidpointLine(x, y, x - size, y + size)
    MidpointLine(x - size, y + size, x - size, y - size)
    MidpointLine(x - size, y - size, x, y)
def draw_play_pause_button():
    x = 100
    y = 180
    size = 10




    if paused:
        # Draw play icon
        MidpointLine(x - size, y - size, x + size, y)
        MidpointLine(x + size, y, x - size, y + size)
    else:
        # Draw pause icon
        MidpointLine(x - size, y - size, x - size, y + size)
        MidpointLine(x + size, y - size, x + size, y + size)
def draw_cross_button():
    x = 170
    y = 180
    size = 10




    MidpointLine(x - size, y - size, x + size, y + size)
    MidpointLine(x - size, y + size, x + size, y - size)




def mouse(button, state, x, y):
    global catcher_x, paused, game_over, score, diamond_speed, diamond_x, diamond_y




    if state == GLUT_DOWN:
        # Convert window coordinates to OpenGL coordinates
        y = 200 - y




        # Check if left arrow button is clicked
        if 20 <= x <= 40 and 170 <= y <= 190:
            print("Restarting the game")
            catcher_x = 100.0
            diamond_y = 200.0
            score = 0
            diamond_speed = 1.0
            game_over = False
            diamond_x = random.uniform(0, 200)
            print("Starting Over")








        # Check if play/pause button is clicked
        elif 90 <= x <= 110 and 170 <= y <= 190:
            paused = not paused
            if paused:
                print("Game Paused")
            else:
                print("Game Resumed")








        # Check if cross button is clicked
        elif 160 <= x <= 180 and 170 <= y <= 190:
            print("Goodbye! Your final score:", score)
            sys.exit()




    glutPostRedisplay()


def draw_text(x, y, text):
    glRasterPos2f(x, y)
    for char in text:
        glutBitmapCharacter(GLUT_BITMAP_9_BY_15, ord(char))


def draw_score():
    glColor3f(1.0, 1.0, 1.0)  # White color for score text
    draw_text(10, 180, f"Score: {score}")


def display():
    glClear(GL_COLOR_BUFFER_BIT)
    draw_catcher()
    draw_diamond()
    draw_score()
    draw_buttons()
    glutSwapBuffers()


def update(value):
    global diamond_x, diamond_y, score, game_over, diamond_speed


    if not game_over and not paused:
        diamond_y = diamond_y - diamond_speed

        if catcher_x - 10 <= diamond_x <= catcher_x + 10 and 10 <= diamond_y <= 20: # Check collision between catcher and diamond
            score += 1
            diamond_y = 200.0
            diamond_x = random.uniform(0, 200)
            print(f"Score: {score}")

        if diamond_y < 0: # Checking if missed the diamond
            game_over = True
            print("Game Over. Your final score:", score)       # on terminal


        diamond_speed += 0.001  # Increase speed over time


    glutTimerFunc(16, update, 0)
    glutPostRedisplay()




def keyboard(key, x, y):
    global catcher_x, diamond_y, paused, game_over, score, diamond_speed


    if key == b'\033':  # ESC key
        glutLeaveMainLoop()
    elif key == GLUT_KEY_LEFT and catcher_x > 10:  # Left arrow key
        catcher_x -= 5
    elif key == GLUT_KEY_RIGHT and catcher_x < 190:  # Right arrow key
        catcher_x += 5
    elif key == b' ':
        paused = not paused
        if paused:
            print("Game Paused")
        else:
            print("Game Resumed")
    elif key == b'\r' or key == b'\n':  # Enter key
        print("Restarting the game")
        catcher_x = 100.0
        diamond_y = 200.0  # Add this line to initialize diamond_y
        score = 0
        diamond_speed = 1.0
        game_over = False
        diamond_x = rando




m.uniform(0, 200)
        print("Starting Over")


    glutPostRedisplay()




def initialize():
    glClearColor(0.0, 0.0, 0.0, 0.0)
    gluOrtho2D(0.0, 200.0, 0.0, 200.0)


def main():
    global diamond_x


    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB)
    glutInitWindowSize(400, 400)
    glutCreateWindow(b"Diamond Catcher Game")


    glutDisplayFunc(display)
    glutKeyboardFunc(keyboard)
    glutSpecialFunc(keyboard)
    glutMouseFunc(mouse)  # Register the mouse click function


    initialize()
    glutTimerFunc(25, update, 0)


    diamond_x = random.uniform(0, 200)  # Initialize diamond_x


    print("Welcome to the Diamond Catcher Game!")
    print("Use left and right arrow keys to move the catcher.")

    glutMainLoop()


if __name__ == "__main__":
    main()