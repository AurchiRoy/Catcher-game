# -*- coding: utf-8 -*-
"""Catcher game Updated.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1llshFD-0dGNT_fwHAkI3PmS5wEhARHx8
"""

# Import necessary libraries
from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import random
import sys

# Global variables
catcher_x = 100.0
diamond_x = 0.0
diamond_y = 200.0
score = 0
game_over = False
paused = False
diamond_speed = 1.0
point_size = 5.0

# For catcher
x1, x2, x3, x4 = 20, 50, 200, 230
y1, y2 = 10, 50
catcher_rec = [(x1, y2), (x4, y1)]

# For diamond
x5, x6, x7 = 200, 210, 220
y3, y4, y5 = 300, 325, 350
diamond_arr = []
fall_speed = 2

# For play/pause button & left arrow button
pause_flag = False  # Pause
start_flag = False  # Start again
over_flag = False  # Game over

# For score count
score_count = 0

# Draw points function
def draw_points(x, y):
    glPointSize(2)
    glBegin(GL_POINTS)
    glVertex2f(x, y)
    glEnd()

# Zone detection function
def find_zone(x0, y0, x1, y1):
    dx = x1 - x0
    dy = y1 - y0
    zone = -1
    if abs(dx) > abs(dy):
        if dx > 0 and dy > 0:
            zone = 0
        elif dx < 0 and dy > 0:
            zone = 3
        elif dx < 0 and dy < 0:
            zone = 4
        else:
            zone = 7
    else:
        if dx > 0 and dy > 0:
            zone = 1
        elif dx < 0 and dy > 0:
            zone = 2
        elif dx < 0 and dy < 0:
            zone = 5
        else:
            zone = 6
    return zone

# Convert to zone 0 function
def convert(original_zone, x, y):
    if original_zone == 0:
        return x, y
    elif original_zone == 1:
        return y, x
    elif original_zone == 2:
        return -y, x
    elif original_zone == 3:
        return -x, y
    elif original_zone == 4:
        return -x, -y
    elif original_zone == 5:
        return -y, -x
    elif original_zone == 6:
        return -y, x
    elif original_zone == 7:
        return x, -y

# Convert back from zone 0 function
def convert_original(original_zone, x, y):
    if original_zone == 0:
        return x, y
    elif original_zone == 1:
        return y, x
    elif original_zone == 2:
        return -y, -x
    elif original_zone == 3:
        return -x, y
    elif original_zone == 4:
        return -x, -y
    elif original_zone == 5:
        return -y, -x
    elif original_zone == 6:
        return y, -x
    elif original_zone == 7:
        return x, -y

# Midpoint line algorithm
def midpoint(zone, x0, y0, x1, y1):
    dx = x1 - x0
    dy = y1 - y0
    d = (2 * dy) - dx
    forE = 2 * dy
    forNE = 2 * (dy - dx)
    x = x0
    y = y0

    while x < x1:
        org_x, org_y = convert_original(zone, x, y)
        draw_points(org_x, org_y)
        if d <= 0:
            x += 1
            d += forE
        else:
            x += 1
            y += 1
            d += forNE

# Eight-way symmetry line drawing function
def eight_way_symmetry(x0, y0, x1, y1):
    zone = find_zone(x0, y0, x1, y1)
    conv_x0, conv_y0 = convert(zone, x0, y0)
    conv_x1, conv_y1 = convert(zone, x1, y1)
    midpoint(zone, conv_x0, conv_y0, conv_x1, conv_y1)

# Function to draw the catcher
def draw_catcher():
    glColor3f(1.0, 1.0, 1.0)  # White color for the catcher
    eight_way_symmetry(x1, y2, x2, y2)  # Top horizontal
    eight_way_symmetry(x1, y1, x2, y1)  # Bottom horizontal
    eight_way_symmetry(x1, y1, x1, y2)  # Left vertical
    eight_way_symmetry(x2, y1, x2, y2)  # Right vertical

# Function to draw the diamond
def draw_diamond():
    glColor3f(random.random(), random.random(), random.random())  # Random color for the diamond
    eight_way_symmetry(x5, y3, x6, y4)  # Top-left
    eight_way_symmetry(x6, y4, x7, y3)  # Top-right
    eight_way_symmetry(x7, y3, x6, y5)  # Bottom-right
    eight_way_symmetry(x6, y5, x5, y3)  # Bottom-left

# Function to display the game elements
def display():
    glClear(GL_COLOR_BUFFER_BIT)
    draw_catcher()
    draw_diamond()
    glutSwapBuffers()

# Function to update game logic
def update(value):
    global diamond_y, score, game_over, fall_speed
    if not paused and not game_over:
        diamond_y -= fall_speed
        if diamond_y < 0:
            game_over = True
            print("Game Over. Your final score:", score)
        glutPostRedisplay()
        glutTimerFunc(16, update, 0)

# Function to handle keyboard input
def keyboard(key, x, y):
    global catcher_x, paused
    if key == b'\033':  # ESC key
        sys.exit()
    elif key == GLUT_KEY_LEFT and catcher_x > 10:
        catcher_x -= 5
    elif key == GLUT_KEY_RIGHT and catcher_x < 190:
        catcher_x += 5
    elif key == b' ':
        paused = not paused
        if paused:
            print("Game Paused")
        else:
            print("Game Resumed")
    glutPostRedisplay()

# Function to initialize the OpenGL settings
def initialize():
    glClearColor(0.0, 0.0, 0.0, 0.0)
    gluOrtho2D(0.0, 400.0, 0.0, 400.0)

# Main function to run the game
def main():
    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB)
    glutInitWindowSize(400, 400)
    glutCreateWindow(b"Catcher Game")
    glutDisplayFunc(display)
    glutKeyboardFunc(keyboard)
    glutTimerFunc(16, update, 0)
    initialize()
    print("Welcome to the Catcher Game!")
    print("Use left and right arrow keys to move the catcher.")
    glutMainLoop()

if __name__ == "__main__":
    main()